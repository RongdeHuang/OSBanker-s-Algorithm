#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int c = 0;
//显示表格 
void display(int n,int m,int Max[n][m],int Allocation[n][m],int Need[n][m],int Available[m]){
	int i,j;
	printf("---------------------------------------------------------------------------------------------------------\n");
	printf("\t\t最大需求矩阵\t\t已分配矩阵\t\t需要资源\t\t剩余可用资源\n"); 
	printf("\t\t\tMax\t\tAllocation\t\tNeed\t\t\tAvailable\n"); 
	printf("---------------------------------------------------------------------------------------------------------\n");
	
	printf("进程名称\t");
	for(i = 0;i < m;i++) printf("R%d  ",i); 
	printf("\t\t");
	for(i = 0;i < m;i++) printf("R%d  ",i);
	printf("\t\t");
	for(i = 0;i < m;i++) printf("R%d  ",i);
	printf("\t\t");
	for(i = 0;i < m;i++) printf("R%d  ",i);
	printf("\n");
	
	for(i = 0;i < n;i++){
		printf("  P%d\t\t",i);
		for(j = 0;j < m;j++) printf(" %d  ",Max[i][j]); 
		printf("\t\t");
		for(j = 0;j < m;j++) printf(" %d  ",Allocation[i][j]);
		printf("\t\t");
		for(j = 0;j < m;j++) printf(" %d  ",Need[i][j]);
		printf("\t\t");
		if(i == 0) {
			for(j = 0;j < m;j++) printf(" %d  ",Available[j]);
		}
		printf("\n");
	}
	printf("---------------------------------------------------------------------------------------------------------\n");
}

//安全性算法
void safe(int n,int m,int Max[n][m],int Allocation[n][m],int Need[n][m],int Available[m],int Work[m],int Finish[n]){
	int safe[n];
	int x = 0,i,j,k;
	for(i = 0;i < n;i++){		
		if(Finish[i] == 0){
			for(j = 0;j < m;j++){
				if(Need[i][j] > Work[j]) break;
				if(j == m - 1){
					for(k = 0;k < m;k++)
						Work[k] += Allocation[i][k];											
  					Finish[i] = 1;
  					safe[x] = i;
  					x++;
  					i = 0;
				}
			} 		
		}		
	}
	for(i = 0;i < n;i++){
		if(Finish[i] == 1) {
			if(i == n - 1){
				printf("系统是安全的\n");
				for(j = 0;j < n;j++){
					printf("P%d",safe[j]);
					if(j != n-1) printf("-->");
				}
				printf("\n");		
			}
		}		
		else{
			printf("系统是不安全的\n");
			break;
		}						
	}
}	

//假定分配
int assume(int n,int m,int Max[n][m],int Allocation[n][m],int Need[n][m],int Available[m],int Work[m],int Finish[n],int Clear[n]){
	int i,j,k,x,y;
	for(i = 0;i < n;i++) Finish[i] = 0;
	for(i = 0;i < n;i++){		
		if(Finish[i] == 0){
			for(j = 0;j < m;j++){
				if(Need[i][j] > Work[j]) break;
				if(j == m - 1){
					for(k = 0;k < m;k++)
						Work[k] += Allocation[i][k];
					for(y = 0;y < m;y++){
						if(Need[i][y] != 0) break;
						if(y == m - 1) {
							for(x = 0;x < n;x++){
								if(Clear[x] == i) break;
								if(x == n - 1){
									for(y = 0;y < m;y++) Available[y] += Allocation[i][y];	
									Clear[c] = i;
									c++;
								}
							}
						}						
					}					
  					Finish[i] = 1;
  					i = 0;
				}
			} 		
		}
		if(i == n - 1){
			for(i = 0;i < n;i++){
				if(Finish[i] == 1) {
					if(i == n - 1){
						return 1;	
					}
				}		
				else{
					return 0;
				}						
			}
		}	
	}
} 

//银行家算法 
int bank(int n,int m,int Max[n][m],int Allocation[n][m],int Need[n][m],int Available[m],int Work[m],int Finish[n],int Clear[n]){
	int Request[n][m];
	int i,j,AQ;	
	printf("\n\t\t注意：编号或者个数越界则自动退出分配！！！\n");
	printf("请输入希望手动分配资源的进程的编号：");
	scanf("%d",&i);
	printf("\n"); 
	if(i >= n || i < 0) {
		printf("\n再见！\n");
		return 0;
	}
	 
	printf("请输入希望手动分配资源的进程的资源编号：");
	scanf("%d",&j);
	printf("\n"); 
	if(j >= m || j < 0) {
		printf("\n再见！\n");
		return 0;
	}
	
	printf("请输入希望手动分配资源的进程的资源个数：");
	scanf("%d",&Request[i][j]);
	printf("\n"); 
	
	if(Request[i][j]> Need[i][j]) {
		printf("出错！它所需要的资源数已超过它所宣布的最大值！\n"); 
		display(n,m,Max,Allocation,Need,Available);
		bank(n,m,Max,Allocation,Need,Available,Work,Finish,Clear);
	}
	else{
		if(Request[i][j]> Available[j]) {
			printf("尚无足够资源，P%d须等待\n",i);
			display(n,m,Max,Allocation,Need,Available);
			bank(n,m,Max,Allocation,Need,Available,Work,Finish,Clear);
		}
		else{
			Available[j] = Available[j] - Request[i][j];
			Allocation[i][j]= Allocation[i][j] + Request[i][j];
			Need[i][j] = Need[i][j] - Request[i][j];
			if(AQ=assume(n,m,Max,Allocation,Need,Available,Work,Finish,Clear)){
				printf("\n申请成功！\n");
				display(n,m,Max,Allocation,Need,Available);
				bank(n,m,Max,Allocation,Need,Available,Work,Finish,Clear);
			}
			else{
				printf("\n申请失败！以上分配作废，恢复原来的分配状态。\n");
				Available[j] = Available[j] + Request[i][j];
				Allocation[i][j]= Allocation[i][j] - Request[i][j];
				Need[i][j] = Need[i][j]+Request[i][j];
				display(n,m,Max,Allocation,Need,Available);
				bank(n,m,Max,Allocation,Need,Available,Work,Finish,Clear);
			} 
		}
	}
}
	
int main(){
	int m,n,i,j,k; //m为资源种类，n为进程个数  
	printf("请输入资源的种类数量："); 
	scanf("%d",&m);
	printf("请输入进程的数量："); 
	scanf("%d",&n);
	int Max[n][m],Allocation[n][m],Need[n][m],Available[m],Request[n][m],Work[m],Finish[n],Clear[n];
	printf("！！！每类剩余可用资源为初始最大9的随机数！！！\n");
	printf("请输入进程的Max矩阵：\n");
	for(i = 0;i < n;i++) 
	for(j = 0;j < m;j++){
		scanf("%d",&Max[i][j]);
	}
	
	printf("请输入进程的Allocation矩阵：\n");
	for(i = 0;i < n;i++) 
	for(j = 0;j < m;j++){
		scanf("%d",&Allocation[i][j]);
	}
	
	for(i = 0;i < n;i++) 
	for(j = 0;j < m;j++){
		Need[i][j] = Max[i][j] - Allocation[i][j];
	}
	
	srand((unsigned)time(NULL));
	for(i = 0;i < m;i++) Available[i] = rand()%10;
	for(i = 0;i < m;i++) Work[i] = Available[i];
	for(i = 0;i < n;i++) Finish[i] = 0;
	
	for(i = 0;i < n;i++) Clear[i] = -1;
	
	display(n,m,Max,Allocation,Need,Available);
	safe(n,m,Max,Allocation,Need,Available,Work,Finish);
	
	while(1){
		printf("是否手动分配资源(按1回车进入，其他数不进入)：");
		scanf("%d",&k);
		if(k == 1) bank(n,m,Max,Allocation,Need,Available,Work,Finish,Clear);
		break; 		
	}
}
